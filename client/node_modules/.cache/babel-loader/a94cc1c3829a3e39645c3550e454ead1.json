{"ast":null,"code":"var _jsxFileName = \"/Users/alysurr/Documents/alyssa-challender-brainflix/src/pages/HomePage/HomePage.jsx\";\nimport '../../App.scss';\nimport React, { Component } from 'react';\nimport Video from '../../components/Video/Video.jsx';\nimport Info from '../../components/Info/Info.jsx';\nimport Comments from '../../components/Comments/Comments.jsx';\nimport Sidebar from '../../components/Sidebar/Sidebar.jsx';\nimport { API_KEY, API_URL } from '../../utils';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass HomePage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      videoList: [],\n      selectedVideo: null\n    };\n\n    this.fetchVideoDetails = movieId => {\n      axios.get(`${API_URL}/${movieId}?api_key=${API_KEY}`).then(movieDetails => {\n        console.log('Individual Video Details: ', movieDetails.data);\n        this.setState({\n          selectedVideo: movieDetails.data\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    // Get the movieId parameter value from the URL.\n    const currentVideoId = this.props.match.params.movieId;\n    console.log('Current Video ID: ', currentVideoId); // This request fetches a list of popular movies data\n\n    axios.get(`${API_URL}/popular?api_key=${API_KEY}`) // https://api.themoviedb.org/3/movie/popular?api_key=c394ed7dc4106041334dd7041556d8f5\n    .then(movieResults => {\n      console.log('Video Results Data: ', movieResults.data);\n      this.setState({\n        videoList: movieResults.data.results\n      }); // After we got a list of movies, take the first result as our \"default movie to load\"\n\n      const firstVideo = movieResults.data.results[0]; // Because we are reusing this component both for initial home page and for individual movie page (via /movies/:movieId route)\n      // we need to check if there is a movieId URL param currently. If we are on individual movie page, then set movieToLoadId to that\n      // otherwise, we must be on the home page, so set it to the id of the default movie we selected in line 44.\n\n      const movieToLoadId = currentVideoId ? currentVideoId : firstVideo.id; // Call the function that fetches individual movie details\n\n      this.fetchVideoDetails(movieToLoadId);\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const currentVideoId = this.props.match.params.movieId;\n    const prevVideoId = prevProps.match.params.movieId;\n    console.log('Previous: ', prevVideoId);\n    console.log('Current: ', currentVideoId); // We need to compare the previous value of movieID URL parameter with the current value\n    // and only make an API request if we are changing URLs. This is required to prevent infinite loop of render > componentDidUpdate > render\n\n    if (currentVideoId !== prevVideoId) {\n      this.fetchVideoDetails(currentVideoId);\n    }\n  }\n\n  render() {\n    if (!this.state.selectedVideo) {\n      return /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 20\n      }, this);\n    }\n\n    const filterCurrentVideo = this.state.selectedVideo ? this.state.videoList.filter(video => video.id !== this.state.selectedVideo.id) : this.state.videoList;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Video, {\n        video: this.state.selectedVideo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container--left\",\n          children: [/*#__PURE__*/_jsxDEV(Info, {\n            video: this.state.selectedVideo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Comments, {\n            video: this.state.selectedVideo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container--right\",\n          children: /*#__PURE__*/_jsxDEV(Sidebar, {\n            videoList: filterCurrentVideo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default HomePage;","map":{"version":3,"sources":["/Users/alysurr/Documents/alyssa-challender-brainflix/src/pages/HomePage/HomePage.jsx"],"names":["React","Component","Video","Info","Comments","Sidebar","API_KEY","API_URL","axios","HomePage","state","videoList","selectedVideo","fetchVideoDetails","movieId","get","then","movieDetails","console","log","data","setState","componentDidMount","currentVideoId","props","match","params","movieResults","results","firstVideo","movieToLoadId","id","componentDidUpdate","prevProps","prevVideoId","render","filterCurrentVideo","filter","video"],"mappings":"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","sourcesContent":["import '../../App.scss';\nimport React, { Component } from 'react';\nimport Video from '../../components/Video/Video.jsx';\nimport Info from '../../components/Info/Info.jsx';\nimport Comments from '../../components/Comments/Comments.jsx';\nimport Sidebar from '../../components/Sidebar/Sidebar.jsx';\nimport { API_KEY, API_URL } from '../../utils';\nimport axios from 'axios';\n\n\n\nclass HomePage extends Component  {\n  \n    // Because render will run before componentDidMount and componentDidUpdate, we need to set our state values to some initial value\n  state = {\n    videoList: [],\n    selectedVideo: null\n  }\n\n  // This function takes a movieId and fetches the details data for it\n  fetchVideoDetails = (movieId) => {\n    axios\n      .get(`${API_URL}/${movieId}?api_key=${API_KEY}`)\n      .then(movieDetails => {\n        console.log('Individual Video Details: ', movieDetails.data);\n\n        this.setState({\n          selectedVideo: movieDetails.data\n        });\n      })\n  }\n\n  componentDidMount() {\n    // Get the movieId parameter value from the URL.\n    const currentVideoId = this.props.match.params.movieId;\n\n    console.log('Current Video ID: ', currentVideoId)\n\n    // This request fetches a list of popular movies data\n    axios\n      .get(`${API_URL}/popular?api_key=${API_KEY}`) // https://api.themoviedb.org/3/movie/popular?api_key=c394ed7dc4106041334dd7041556d8f5\n      .then(movieResults => {\n        console.log('Video Results Data: ', movieResults.data);\n\n        this.setState({\n          videoList: movieResults.data.results\n        });\n\n        // After we got a list of movies, take the first result as our \"default movie to load\"\n        const firstVideo = movieResults.data.results[0];\n\n         // Because we are reusing this component both for initial home page and for individual movie page (via /movies/:movieId route)\n         // we need to check if there is a movieId URL param currently. If we are on individual movie page, then set movieToLoadId to that\n         // otherwise, we must be on the home page, so set it to the id of the default movie we selected in line 44.\n        const movieToLoadId = currentVideoId ? currentVideoId : firstVideo.id;\n\n        // Call the function that fetches individual movie details\n        this.fetchVideoDetails(movieToLoadId);\n      });\n  }\n\n  componentDidUpdate(prevProps) {\n    const currentVideoId = this.props.match.params.movieId;\n    const prevVideoId = prevProps.match.params.movieId;\n\n    console.log('Previous: ', prevVideoId);\n    console.log('Current: ', currentVideoId);\n\n    // We need to compare the previous value of movieID URL parameter with the current value\n    // and only make an API request if we are changing URLs. This is required to prevent infinite loop of render > componentDidUpdate > render\n    if (currentVideoId !== prevVideoId) {\n      this.fetchVideoDetails(currentVideoId);\n    } \n  }\n  render() {\n    if(!this.state.selectedVideo){\n            return <h2>Loading...</h2>;\n    }\n    \n    const filterCurrentVideo = this.state.selectedVideo\n      ? this.state.videoList.filter(video => video.id !== this.state.selectedVideo.id)\n      : this.state.videoList;\n\n    return ( \n      <>\n      <Video video={this.state.selectedVideo}/>\n      <div className=\"container\">\n        <div className=\"container--left\">\n          <Info video={this.state.selectedVideo}/>\n          <Comments video={this.state.selectedVideo}/>\n        </div>\n        <div className=\"container--right\">\n          <Sidebar videoList={filterCurrentVideo} />\n        </div>\n      </div>\n      </>\n    );\n  }\n}\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}